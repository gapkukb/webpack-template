i18n（Internationalization，即国际化）

一、多域名（子域）部署不同语言站点
	1.这种方式不同语言之间隔离的比较彻底。比较好兼容
	2.静态资源可以实现编译期间确定各自归属
	3.配置比较多，维护繁琐，但是有利于工程化
二、单域名下根据不同路径由nginx进行转发
	1.和第一点一样静态资源可以在编译时确定，但是因为不同语言在同一域名下，localstore需要特别处理
三、单一部署
	1.静态资源无法在编译时确定，所以语言包，图片等资源需要全部打包在一起，然后根据运行时状态分别加载。
	2.localstore需要处理
	3.可以选择放弃语言包，使用谷歌翻译，缺点是翻译准确性不足

几点考虑：
0.  i18n-webpack-plugin 目前是比较合适的webpack打包插件，可以将国际化在编译期间转换成静态文字。
	编译时按需加载的好处有使用配置比较方便，运行时不需要任何依赖，自动的实现了文案的按页面的按需加载。
	缺点是使用文案的地方必须要使用函数调用的方式，没有对象属性的方式自然。
	最严重的问题是，编译时按需加载需要为每种语言都生成一份js文件，因此n种语言，我们需要生成n个js文件.
	这也导致了我们需要维护n个版本的html文件以解决js的更新)，这样较为浪费cdn资源，而且也难以管理，难以进行热更新操作。

1.比较理想的将语言进行分包，然后由webpack在编译期将引用语言包字段的地方替换成静态文字，不使用runtime加载的方式。此方式适合多站点部署--静态资源编译期确定  --- i18n-webpack-plugin 可以做到

2.国际化有个痛点就是文字中的变量难处理，比如中文“xxx用户”在英语中是“user xxx”。xxx这个变量在不同语言中位置不同。 可以借鉴c语言 printf("abc%s",的方式)。变量使用%s %d %f的方式进行

3.国际化方案比较适合vue react这类view库来做。

4.语言包尽量进行local缓存并做好版本标记防止无法更新，先从local中获取语言。

5.大部分情况都是讲语言包整体导入，再进行引用。有一种新的方式就是将语言包缩小在组件的颗粒度中，。在vue react中，每个组件都有自己的语言包  解耦组件和外部的联系，使得组件对外界无感，实现高内聚。

6.尽量采用打包工具来完成国际化，开发一个插件来校验字段完整，如以cn.json为基础，挨个对比其他语言包是否相比cn.json缺失字段，如果缺失字段要报错并中断执行，主要应用在生产打包，开发环境忽略。

7.使用运行时按需加载，担心一次加载全部语言包造成浪费，可以考虑在服务端运行时拆分语言包，然后下发


相关资源：
i18n-webpack-plugin 依赖于纯 JSON 定义的翻译文件，并通过类似于 __("Hello") 的占位符执行替换。
po-loader 将 GNU gettext PO 文件 映射为多种格式，包括 JSON 和 Jed。
jed-webpack-plugin 是一个基于 Jed 的解决方案。
globalize-webpack-plugin 是一个 Webpack 插件，通过它可以使用 globalize 解决 i18n/l10n 问题。
HTML 多语言 Webpack 插件 gettext-html-plugin。处理传统的html多页应用
